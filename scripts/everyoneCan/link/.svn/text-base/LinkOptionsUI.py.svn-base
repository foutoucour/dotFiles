# -*- coding: utf-8 -*-

from PyQt4 import QtGui
from PyQt4 import QtCore

from everyoneCan import UIs
reload(UIs)
from everyoneCan import CustomWidgets as cw
reload(cw)
from everyoneCan.light import lightOptions
reload(lightOptions)

from everyoneCan import SharedConstants
reload(SharedConstants)
scc                         = SharedConstants.Constants()

class Gui(QtGui.QMainWindow):
    """
    Graphic Interface of lightOptions tool
    Discuss with control through an observer
    """
    __SET_COLOR         = [163,190,218]
    __GEO_COLOR         = [142,208,132]
    __LIGHT_COLOR       = [247,244,229]
    __SHADOW_COLOR      = [139,128,174]
    __BLOCKER_COLOR     = [142,208,132]
    
    def setObserver(self, obj):
        """
        The observer will be the bridge between the controlor and the GUI
        This way, the GUI doesn't know the controlor
        @type object: object
        @param object: observer
        """ 
        self.__oObserver = obj

    def setLightsViewName(self,string):
        self.__sLightsViewName = string
        
    def setBlockersViewName(self,string):
        self.__sBlockersViewName = string
        
    def setSetsViewName(self,string):
        self.__sSetsViewName = string
    
    def setShadowCamerasViewName(self,string):
        self.__sShadowCamerasViewName = string
    
    def setShadowMapsViewName(self,string):
        self.__sShadowMapsViewName = string
        
    def setPicturesViewName(self,string):
        self.__sPicturesViewName = string
        
    def setGeometriesViewName(self,string):
        self.__sGeometriesViewName = string

    def clearViewSelection(self, oObject):
        oObject.oList.clearSelection()       
        
    def __delightEveryThing(self):
        for oView in self.__listListViews:
            print oView.getAllItems()
           
    def main(self):                  
        def __contextMenu(oObject): 
            self.emit(QtCore.SIGNAL('oGui_list_contextMenu'), oObject)
        
        def __list_link(oObject, oItem, bool):
            self.emit(QtCore.SIGNAL('oGui_list_link'), 
                      oObject, oItem, bool)
        
            
        if self.__boolSelfLaunch == 1:
            QtGui.QMainWindow.__init__(self)
            oIcon = QtGui.QIcon('%s/LinkOptions.jpg' %scc.ICON_PATH)
            self.setWindowIcon(oIcon)
        else :
            QtGui.QWidget.__init__(self)
            
        oScreen                 = QtGui.QDesktopWidget().screenGeometry()
        self.__oWidth           = oScreen.width()*90/100
        self.__oHeight          = oScreen.height()*90/100
        self.__listListViews    = []
        self.resize(self.__oWidth,self.__oHeight)
        
        self.oLights          = self.__lights()
#        self.oLights.setButtonIcon(scc.SPOTLIGHT_ICON)
        self.listViews.append(self.oLights)
        self.connect(self.oLights, QtCore.SIGNAL('list_changed'),
                        self.__selection)
        self.connect(self.oLights, QtCore.SIGNAL('list_contextMenu'),
                        __contextMenu)
        self.connect(self.oLights, QtCore.SIGNAL('oBlock_list_link'),
                        __list_link)
        
        self.oBlockers        = self.__blockers()
#        self.oBlockers.setButtonIcon(scc.BLOCKER_ICON)
        self.listViews.append(self.oBlockers)
        self.connect(self.oBlockers, QtCore.SIGNAL('list_changed'),
                        self.__selection)
        self.connect(self.oBlockers, QtCore.SIGNAL('list_contextMenu'),
                        __contextMenu)
        self.connect(self.oBlockers, QtCore.SIGNAL('oBlock_list_link'),
                        __list_link)
        
        self.oShadowCameras   = self.__shadowCameras()
#        self.oShadowCameras.setButtonIcon(scc.SHADOW_CAMERA_ICON)
        self.listViews.append(self.oShadowCameras)
        self.connect(self.oShadowCameras, QtCore.SIGNAL('list_changed'),
                        self.__selection)
        self.connect(self.oShadowCameras, QtCore.SIGNAL('list_contextMenu'),
                        __contextMenu)
        self.connect(self.oShadowCameras, QtCore.SIGNAL('oBlock_list_link'),
                        __list_link)
        
#        self.oShadowMaps      = self.__shadowMaps()
##        self.oShadowMaps.setButtonIcon(scc.FILE_ICON)
#        self.listViews.append(self.oShadowMaps)
#        self.connect(self.oShadowMaps, QtCore.SIGNAL('list_changed'),
#                        self.__selection)
#        self.connect(self.oShadowMaps, QtCore.SIGNAL('list_contextMenu'),
#                        __contextMenu)
#        self.connect(self.oShadowMaps, QtCore.SIGNAL('oBlock_list_link'),
#                        __list_link)
        
        self.oPictures      = self.__pictures()
#        self.oPictures.setButtonIcon(scc.FILE_ICON)
        self.listViews.append(self.oPictures)
        self.connect(self.oPictures, QtCore.SIGNAL('list_changed'),
                        self.__selection)
        self.connect(self.oPictures, QtCore.SIGNAL('list_contextMenu'),
                        __contextMenu)
        self.connect(self.oPictures, QtCore.SIGNAL('oBlock_list_link'),
                        __list_link)
        
        self.oSets            = self.__sets()
#        self.oSets.setButtonIcon(scc.LIGHTSHADOW_SET_ICON)
        self.listViews.append(self.oSets)
        self.connect(self.oSets, QtCore.SIGNAL('list_changed'),
                        self.__selection)
        self.connect(self.oSets, QtCore.SIGNAL('list_contextMenu'),
                        __contextMenu)
        self.connect(self.oSets, QtCore.SIGNAL('oBlock_list_link'),
                        __list_link)
        
        self.oGeometries      = self.__geometries()
#        self.oPictures.setButtonIcon(scc.AMBIENTLIGHT_ICON)
        self.listViews.append(self.oGeometries)
#        self.__listListViews.append(self.oGeometries)
        self.connect(self.oGeometries, QtCore.SIGNAL('list_changed'),
                        self.__selection)
        self.connect(self.oGeometries, QtCore.SIGNAL('list_contextMenu'),
                        __contextMenu)
        self.connect(self.oGeometries, QtCore.SIGNAL('oBlock_list_link'),
                        __list_link)
        
        oCentralWidget          = QtGui.QWidget()
        oMainLayout             = QtGui.QHBoxLayout(oCentralWidget)
        oMainLayout.setContentsMargins(0,0,0,0)        
        
        oListLayout             = QtGui.QHBoxLayout()
    
#        oShadowLayout           = QtGui.QHBoxLayout()
#        oShadowLayout.setContentsMargins(0,0,0,0)
#        oShadowLayout.addWidget(self.oBlockers)
#        oShadowLayout.addWidget(self.oShadowMaps)
#        oShadowLayout.addWidget(self.oShadowCameras)
#        oShadowLayout.addWidget(self.oPictures)
                
        oSetLayout              = QtGui.QVBoxLayout()
        oSetLayout.setContentsMargins(0,0,0,0)
        oSetLayout.addWidget(self.oSets)
        
        oListLayout.addWidget(self.oLights)
        oListLayout.addLayout(oSetLayout)
        oListLayout.addWidget(self.oGeometries)
#        oListLayout.addLayout(oShadowLayout)
        oListLayout.addWidget(self.oBlockers)
#        oListLayout.addWidget(self.oShadowMaps)
        oListLayout.addWidget(self.oShadowCameras)
        oListLayout.addWidget(self.oPictures)

        oListLayout.setStretchFactor(self.oLights,3)
        oListLayout.setStretchFactor(oSetLayout,2)
        oListLayout.setStretchFactor(self.oGeometries,2)
        oListLayout.setStretchFactor(self.oBlockers,2)
#        oListLayout.setStretchFactor(self.oShadowMaps,2)
        oListLayout.setStretchFactor(self.oShadowCameras,2)
        oListLayout.setStretchFactor(self.oPictures,2)
#        oListLayout.setStretchFactor(oShadowLayout,2)
        
        
        oRefresh                = QtGui.QPushButton('Refresh')
        __RENDER_COLOR          = QtGui.QColor(239,228,174)
        sColor ="QWidget { background-color: %s }" %__RENDER_COLOR.name()
        self.connect(oRefresh, 
                    QtCore.SIGNAL('clicked()'), 
                    self.__refresh)
        oRefresh.setStyleSheet(sColor)
        
        self.__oWidgetLayoutParent     = QtGui.QWidget()
        oWidgetLayout           = QtGui.QVBoxLayout(self.__oWidgetLayoutParent)
        oWidgetLayout.addWidget(oRefresh)
        oWidgetLayout.addLayout(oListLayout)
        self.__oWidgetLayoutParent.setLayout(oWidgetLayout)
        
#        def __widgetLayout_Hide():
#            print 'bouh'
#            if self.__boolWidgetHide == 0:
#                self.__boolWidgetHide = 1
#                self.__oWidgetLayoutParent.setHidden(self.__boolWidgetHiden)
#            else :
#                self.__boolWidgetHide = 0
#                self.__oWidgetLayoutParent.setHidden(self.__boolWidgetHide)
#                self.__oWidgetLayoutParent.setMinimumSize(self.__oWidth,
#                                                          self.__oHeight)

#        oHideListButton         = QtGui.QPushButton()
#        oHideListButton.setMaximumWidth(8)
#        oHideListButton.setMinimumHeight(self.__oHeight/3*2)
#        self.connect(oHideListButton, QtCore.SIGNAL('clicked()'),
#                        __widgetLayout_Hide)        
        oLightOptionsLayout    = QtGui.QVBoxLayout()
        oLightOptionsLayout.setContentsMargins(0,0,0,0)
        oLightOptionsLayout.addWidget(self.oLightOptions)
        oLightOptionsLayout.addWidget(self.__UIs())
        oLightOptionsLayout.addStretch(1)
#        oMainLayout.addWidget(oHideListButton)
        oMainLayout.addLayout(oLightOptionsLayout)
        oMainLayout.addWidget(self.__oWidgetLayoutParent)
        oMainLayout.setStretchFactor(oLightOptionsLayout,0)
        oMainLayout.setStretchFactor(self.__oWidgetLayoutParent,10)
        # if the tool is launched as standalone
        # we need to set its centralWidget
        if self.__boolSelfLaunch == 1:
            self.setCentralWidget(oCentralWidget)
        
        self.__setDirectLinks()
    
    def __UIs(self):
        """
        Methods creating the UI bloc
        @type oMasterLayout: Qt object
        @param oMasterLayout: Qt Layout
        """             
        oUIGrpBox = QtGui.QGroupBox(scc.UI_GROUPBOX_NAME)
        oUILayout = QtGui.QVBoxLayout(oUIGrpBox)
        oUILayout.setContentsMargins(0,0,0,0)
        oUILayout.addWidget(UIs.AllOthersUIWidget(__name__,'V'))
        return oUIGrpBox
    
    def __init__(self, boolSelfLaunch):
        """
        @type boolSelfLaunch: int boolean
        @param boolSelfLaunch: indicate if the tool is launched as 
                standalone (1) or not (0)
        """
        self.__boolWidgetHide   = 0
        self.__boolSelfLaunch   = boolSelfLaunch
        self.listViews          = []
        self.oLightOptions      = lightOptions.LightingOptionsLauncher(0)
    
    def __setDirectLinks(self):
        # blocker Block
        self.oBlockers.setDirectLink(self.oLights.title)
        # light Block
        self.oLights.setDirectLink(self.oBlockers.title)
        self.oLights.setDirectLink(self.oSets.title)
        self.oLights.setDirectLink(self.oShadowCameras.title)
        self.oLights.setDirectLink(self.oPictures.title)
        # set Block
        self.oSets.setDirectLink(self.oLights.title)
        self.oSets.setDirectLink(self.oGeometries.title)
        self.oSets.setDirectLink(self.oShadowCameras.title)
        # geometry Block
        self.oGeometries.setDirectLink(self.oSets.title)
        # shadow camera Block
        self.oShadowCameras.setDirectLink(self.oLights.title)
#        self.oShadowCameras.setDirectLink(self.oShadowMaps.title)
        self.oShadowCameras.setDirectLink(self.oSets.title)
        # shadow map Block
#        self.oShadowMaps.setDirectLink(self.oLights.title)
        # picture Bloc
        self.oPictures.setDirectLink(self.oLights.title)
    
    
    def __lights(self, list=[]):
        oListView = self.__LinkBloc(self.__sLightsViewName, list, self)
        oListView.setColor(self.__LIGHT_COLOR[0],self.__LIGHT_COLOR[1],
                                                    self.__LIGHT_COLOR[2])
        return oListView
    
    def __sets(self, list=[]):
        def __createSet():
            self.emit(QtCore.SIGNAL('listSet_contextMenu_createSet'))
            
        self.__oListView = self.__LinkBloc(self.__sSetsViewName, list, self)
        self.__oListView.setColor(self.__SET_COLOR[0],
                                  self.__SET_COLOR[1],
                                  self.__SET_COLOR[2])
        oCreateAction     = QtGui.QAction('Create Set', self)
        self.connect(oCreateAction, 
                     QtCore.SIGNAL('triggered()'), 
                     __createSet)
        self.__oListView.oList.addAction(oCreateAction)
        self.__oListView.setIconSize(35)
        return self.__oListView
    
    def __blockers(self, list=[]):
        oListView = self.__LinkBloc(self.__sBlockersViewName, list, self)
        oListView.setColor(self.__BLOCKER_COLOR[0],self.__BLOCKER_COLOR[1],
                                                    self.__BLOCKER_COLOR[2])
        return oListView
    
    def __geometries(self, list=[]):
        oListView = self.__LinkBloc(self.__sGeometriesViewName, list, self)
        oListView.setColor(self.__GEO_COLOR[0],self.__GEO_COLOR[1],
                                                    self.__GEO_COLOR[2])
        return oListView

    def __shadowCameras(self, list=[]):
        oListView = self.__LinkBloc(self.__sShadowCamerasViewName, list, self)
        oListView.setColor(self.__SHADOW_COLOR[0],self.__SHADOW_COLOR[1],
                                                    self.__SHADOW_COLOR[2])
        return oListView
    
#    def __shadowMaps(self, list=[]): 
#        oListView = self.__LinkBloc(self.__sShadowMapsViewName, list, self)
#        oListView.setColor(self.__SHADOW_COLOR[0],self.__SHADOW_COLOR[1],
#                                                    self.__SHADOW_COLOR[2])
#        return oListView
    
    def __pictures(self, list=[]): 
        oListView = self.__LinkBloc(self.__sPicturesViewName, list, self)
        oListView.setEnabled(0)
        oListView.setColor(self.__BLOCKER_COLOR[0],self.__BLOCKER_COLOR[1],
                                                    self.__BLOCKER_COLOR[2])
        return oListView

    def __selection(self, oObject):
        # set the background as white for everything
        for element in self.listViews:
            element.delightItems()
        self.emit(QtCore.SIGNAL('oGui_selection'), oObject)
    
    def __refresh(self):
        self.emit(QtCore.SIGNAL('oGui_refresh'))
        
    class __LinkBloc(cw.AlItemView):
        # listDirectLinks lists the blocks with which this bloc
        # can set connect with
        __MAIN_ACTION_TITLE = 'link to selection'
        
        def __init__(self, title, list, parent):
            """
            @type title: string
            @param title: name of the widget
            @type list: list of string
            @param list: names of elements to add
            @type parent: object
            @param parent: parent of the widget
            """
            self.listDirectLinks = []
            self.listConnections = []
            cw.AlItemView.__init__(self, title, list, parent)
            self.oMainAction     = QtGui.QAction(self.__MAIN_ACTION_TITLE,
                                                    self)
            self.oMainAction.setVisible(0)
            
            self.connect(self.oMainAction, 
                         QtCore.SIGNAL('triggered()'), 
                         self.__unlink)
            self.oList.addAction(self.oMainAction)
            self.oList.addSeparator()
            
        def __unlink(self):
            self.emit(QtCore.SIGNAL('list_contextMenu'),
                      self)
        
        def setDirectLink(self, sName):
            """
            Append a string to the list
            @type sName: string
            @param sName: name of a block
            """
            self.listDirectLinks.append(sName)
        
        def removeDirectLink(self, sName):
            """
            remove the string from the list
            @type sName: string
            @param sName: name of a block
            """
            self.listDirectLinks.remove(sName)
        
        def setConnections(self, list):
            self.listConnections = list
        
        def contextMenuAction(self, oObject, oItem):
            self.emit(QtCore.SIGNAL('oBlock_list_link'),
                      oObject, oItem, self.__testConnection(oItem) )
                
        def __testConnection(self, oItem):
            """
            @type oItem: QItem
            @rtype: integer
            @return: 0 if we need to unlink, 1 to link
            """
            for element in self.listConnections:
                if oItem.text() == element[1]:
                    return 0   
            return 1

# Ni !