# -*- coding: utf-8 -*-
import sys
from everyoneCan import ec__CustomWidgets as cw
reload(cw) 
from PyQt4 import QtGui
from PyQt4 import QtCore


class Gui(QtGui.QMainWindow):
    """
    Graphic Interface of lightOptions tool
    Discuss with controlor through an observer
    """
    #==========================================================================
    # constants
    #==========================================================================
    # path to icons 
    __ICON_PATH = '/home/haim_sarusi/icons/lighting_tools'
    __OUTPUT_ICON = '%s/Output.jpg' %__ICON_PATH
    __CAMERA_ICON = '%s/Camera.jpg' %__ICON_PATH
    __IMAGE_ICON = '%s/Image.jpg' %__ICON_PATH
    __ANIMATION_ICON = '%s/Animation.jpg' %__ICON_PATH
    __DIRECTORIES_ICON = '%s/Directories.jpg' %__ICON_PATH
    __ADVANCED_ICON = '%s/Advanced.jpg' %__ICON_PATH
    #==========================================================================
    # variables
    #==========================================================================
    __listCameras = []
    
    def __init__(self, boolSelfLaunch):
        """
        @type boolSelfLaunch: int boolean
        @param boolSelfLaunch: indicate if the tool is launched as 
                standalone (1) or not (0)
        """
        self.__boolSelfLaunch = boolSelfLaunch
        QtGui.QMainWindow.__init__(self)

    def main(self):
        self.__oCentralWidget = QtGui.QWidget()
        self.__oMainLayout = QtGui.QVBoxLayout(self.__oCentralWidget)
        self.__oMainLayout.setContentsMargins(0,0,0,0)
        self.__renderButtons(self.__oMainLayout)
        self.__output(self.__oMainLayout)
        self.__frame(self.__oMainLayout)
        self.__animation(self.__oMainLayout)
        self.__image(self.__oMainLayout)
        self.__directories(self.__oMainLayout)
        self.__advanced(self.__oMainLayout)
        self.__oMainLayout.addStretch(1)
        # if the tool is launched as standalone
        # we need to set its centralWidget
        if self.__boolSelfLaunch == 1:
            self.setCentralWidget(self.__oCentralWidget)
    
    #==========================================================================
    # setting of list of ComboBoxes
    #==========================================================================
    def setFormatList(self, list):
        self.__listFormats = list
    
    def setCameraList(self, list):
        self.__listCameras = list
    
    def setResoList(self, list):
        self.__listResolutions = list
    
    def setBucketSizeList(self, list):
        self.__listBucketSizes = list
    
    def setGridSizeList(self, list):
        self.__listGridSizes = list
    
    def setFarmGroupList(self, list):
        self.__listFramGroups = list        
      
    #==========================================================================
    # get and set methods
    #==========================================================================
    def getResolution(self):
        return self.__oResoComboBox.currentIndex()
    def setResolution(self, int):
        self.__oResoComboBox.setCurrentIndex(int)
    
    def setCurrentFrameState(self, int):
        self.__oCurrentFrame.setCheckState(int)
    def getCurrentFrameState(self):
        return self.__oCurrentFrame.checkState()
    
    def setAnimationDisabled(self, int):
        self.__oSMEPushButton.setDisabled(int)
        self.__oShotTimelineButton.setDisabled(int)
        self.__oByFrame.setDisabled(int)
        self.__oFrame.setDisabled(int)
        
    def setFrameText(self, string):
        self.__oFrame.setText(string)
    def getFrameText(self):
        return self.__oFrame.text()

    def setByFrameText(self, string):
        self.__oByFrame.setText(string)
    def getByFrameText(self):
        return self.__oByFrame.text()
    
    def getCameraBlurState(self):
        return self.__oCamBlurCheckBox.checkState()
    def setCameraBlurState(self, int):
        self.__oCamBlurCheckBox.setCheckState(int)
    
    def getDOFState(self):
        return self.__oDOFCheckBox.checkState()
    def setDOFState(self, int):
        self.__oDOFCheckBox.setCheckState(int)
    
    def getLazynessState(self):
        return self.__oLazynessCheckBox.checkState()
    def setLazynessState(self, int):
        self.__oLazynessCheckBox.setCheckState(int)

    def setShadingRateText(self, string):
        self.__oShadingRate.setText(string)
    def getShadingRateText(self):
        return self.__oShadingRate.text()

    def setPixelSampleText(self, string):
        self.__oPixelSamples.setText(string)
    def getPixelSampleText(self):
        return self.__oPixelSamples.text()
    
    def setRibNameText(self, string):
        self.__oRibName.setText(string)
    def getRibNameText(self):
        return self.__oRibName.text()
    
    def getRibNameState(self):
        return self.__oRibNameButton.checkState()
    def setRibNameState(self, int):
        self.__oRibNameButton.setCheckState(int)
        
    def setPictureFolderText(self, string):
        self.__oPictureFolder.setText(string)
    def getPictureFolderText(self):
        return self.__oPictureFolder.text()
    
    def setPictureFolderState(self, int):
        self.__oPictureFolderButton.setCheckState(int)
    def getPictureFolderState(self):
        return self.__oPictureFolderButton.checkState() 
        
    def getSampleMotionState(self):
        return self.__oSampleMotionOptions.checkState()
    def setSampleMotionState(self, int):
        self.__oSampleMotionOptions.setCheckState(int)
    
    def getBucketSize(self):
        return self.__oBucketSizeComboBox.currentIndex()
    def setBucketSize(self, int):
        self.__oBucketSizeComboBox.setCurrentIndex(int)
    
    def getGridSize(self):
        return self.__oGridSizeComboBox.currentIndex()
    def setGridSize(self, int):
        self.__oGridSizeComboBox.setCurrentIndex(int)
        
    def getFormat(self):
        return self.__oFormatComboBox.currentIndex()
    def setFormat(self, int):
        self.__oFormatComboBox.setCurrentIndex(int)

    def getCamera(self):
        return self.__oCameraComboBox.currentIndex()
    def setCamera(self, int):
        self.__oCameraComboBox.setCurrentIndex(int)
        
    def refreshCameraList(self):
        self.__oCameraComboBox.clear()
        self.__oCameraComboBox.addItems(self.__listCameras)
                
    def setToFarmState(self, bool):
        self.__oToFarmBloc.setChecked(bool)
    def getToFarmState(self):
        return self.__oToFarmBloc.isChecked()
    
    def getFarmGroup(self):
        return self.__oFarmGroupComboBox.currentIndex()
    def setFarmGroup(self, int):
        self.__oFarmGroupComboBox.setCurrentIndex(int)
    
    def getRayState(self):
        return self.__oRayCheckBox.checkState()
    def setRayState(self, int):
        self.__oRayCheckBox.setCheckState(int)
    
    def getSurfaceState(self):
        return self.__oSurfaceCheckBox.checkState()
    def setSurfaceState(self, int):
        self.__oSurfaceCheckBox.setCheckState(int)
    
    def getDisplacementState(self):
        return self.__oDisplCheckBox.checkState()
    def setDisplacementState(self, int):
        self.__oDisplCheckBox.setCheckState(int)
    
    def getSubSurfaceState(self):
        return self.__osubsurfaceCheckBox.checkState()
    def setSubSurfaceState(self, int):
        self.__osubsurfaceCheckBox.setCheckState(int)

    def __frame(self, oMasterLayout):
        def __camera():
            def __camera_onChanged():
                self.emit(QtCore.SIGNAL('camera_onChanged'))
            
            def __camera_onClick():
                self.emit(QtCore.SIGNAL('camera_onClick'))
            
            
            self.__oCameraPushButton = QtGui.QPushButton('refresh')
            self.__oCameraPushButton.setMaximumWidth(45)    
            self.connect(self.__oCameraPushButton,
                         QtCore.SIGNAL('clicked()'),
                         __camera_onClick)
            self.__oCameraComboBox = cw.AlComboBox(self.__listCameras)
            self.connect(self.__oCameraComboBox,
                         QtCore.SIGNAL('currentIndexChanged(int)'),
                         __camera_onChanged)
            self.__oCameraButtonsParent = QtGui.QWidget()
            self.__oCameraButtonsLayout = cw.AlHBoxLayout()
            self.__oCameraButtonsLayout.addWidget(self.__oCameraComboBox)
            self.__oCameraButtonsLayout.addWidget(self.__oCameraPushButton)
            self.__oCameraButtonsParent.setLayout(self.__oCameraButtonsLayout)
            self.__oCameraGrpLabel = cw.AlGroupLabel('Camera :',
                                                self.__oCameraButtonsParent)
            
            return self.__oCameraGrpLabel
        
        def __resolution():
            def __resoComboBox_onChanged():
                self.emit(QtCore.SIGNAL('resoComboBox_onChanged'))
                
            self.__oResoLayout = cw.AlVBoxLayout()
            self.__oResoComboBox = cw.AlComboBox(self.__listResolutions)
            self.__oResoGrpLabel = cw.AlGroupLabel('Resolution :',
                                                      self.__oResoComboBox)
            self.connect(self.__oResoComboBox, 
                         QtCore.SIGNAL('currentIndexChanged(int)'),
                         __resoComboBox_onChanged)
            return self.__oResoGrpLabel
      
        self.__oCameraParent = QtGui.QWidget()           
        self.__oCameraLayout = cw.AlVBoxLayout()
        self.__oCameraLayout.addWidget(__resolution())
        self.__oCameraLayout.addWidget(__camera())
        self.__oCameraParent.setLayout(self.__oCameraLayout)
        self.__oCameraBloc = cw.AlBloc(self, self.__CAMERA_ICON,
                                           'Camera :',
                                           self.__oCameraParent)
        oMasterLayout.addWidget(self.__oCameraBloc)
    
    def __animation(self, oMasterLayout):
        def __currentFrame_onClick():
                self.emit(QtCore.SIGNAL('currentFrame_onClick'))
                
        def __frame_onChanged():
            self.emit(QtCore.SIGNAL('frame_onChanged'))
            
        def __byFrame_onChanged():
            self.emit(QtCore.SIGNAL('byFrame_onChanged'))
        
        def __timeline():
            def __shotTimeline_onClick():
                self.emit(QtCore.SIGNAL('shotTimeline_onClick'))
            
            def __currentTimeline_onClick():
                self.emit(QtCore.SIGNAL('currentTimeline_onClick'))
            
            def __SME_onClick():
                self.emit(QtCore.SIGNAL('SME_onClick'))

            self.__oSMEPushButton = QtGui.QPushButton('S.M.E.')
            self.__oSMEPushButton.setDisabled(1)
            self.connect(self.__oSMEPushButton,
                         QtCore.SIGNAL('clicked()'),
                        __SME_onClick)
            
            self.__oShotTimelineButton = QtGui.QPushButton('Shot')
            self.__oShotTimelineButton.setDisabled(1)
            self.connect(self.__oShotTimelineButton,
                         QtCore.SIGNAL('clicked()'),
                        __shotTimeline_onClick)
            self.__oCurrentTimelinePushButton = QtGui.QPushButton(
                                                    'Current')
            self.__oCurrentTimelinePushButton.setDisabled(1)
            self.connect(self.__oCurrentTimelinePushButton,
                         QtCore.SIGNAL('clicked()'),
                        __currentTimeline_onClick)

            self.__oSeveralParent = QtGui.QWidget()
            self.__oSeveralFramesLayout = QtGui.QVBoxLayout()
            self.__setContentMargins0(self.__oSeveralFramesLayout)
            self.__oSeveralFramesLayout.addWidget(
                                        self.__oSMEPushButton)
            self.__oSeveralFramesLayout.addWidget(self.__oShotTimelineButton)
            
            self.__oSeveralParent.setLayout(self.__oSeveralFramesLayout)
            self.__oSeveralLabel = cw.AlGroupLabel(
                                            '', 
                                        self.__oSeveralParent)
            return self.__oSeveralLabel
        
        
        self.__oCurrentFrame = QtGui.QCheckBox()
        self.__oCurrentFrameGroupLabel = cw.AlGroupLabel(
                                        'Current frame :',
                                        self.__oCurrentFrame)
        self.connect(self.__oCurrentFrame,
                         QtCore.SIGNAL('clicked()'),
                         __currentFrame_onClick)
        
        self.__oFrame = cw.AlLineEdit()
        self.__oFrame.setDisabled(1)
        self.__oGroupLabelFrame = cw.AlGroupLabel(
                                        'Frame :',
                                        self.__oFrame)
        self.__lineEditActions(self.__oFrame,__frame_onChanged)
        self.__oByFrame = cw.AlLineEdit()
        self.__oByFrame.setDisabled(1)
        self.__oGroupLabelByFrame = cw.AlGroupLabel(
                                        'by Frame :',
                                        self.__oByFrame)
        self.__lineEditActions(self.__oByFrame,__byFrame_onChanged)

        
        self.__oAnimationParent = QtGui.QWidget()
        self.__oAnimationLayout = cw.AlVBoxLayout()
        self.__oAnimationLayout.addWidget(self.__oCurrentFrameGroupLabel)

        self.__oAnimationLayout.addWidget(__timeline())
        self.__oAnimationLayout.addWidget(self.__oGroupLabelFrame)
        self.__oAnimationLayout.addWidget(self.__oGroupLabelByFrame)
        self.__oAnimationParent.setLayout(self.__oAnimationLayout)
        self.__oAnimationBloc = cw.AlBloc(self, self.__ANIMATION_ICON,
                                         'Animation :',
                                         self.__oAnimationParent)
        
        oMasterLayout.addWidget(self.__oAnimationBloc)
        
    def __image(self, oMasterLayout):
        def __shadingRate():
            def __shadingRate_onChanged():
                self.emit(QtCore.SIGNAL('shadingRate_onChanged'))
                
            self.__oShadingRate = cw.AlLineEdit()
            self.__oGroupLabelShadingRate = cw.AlGroupLabel(
                                            'Shading Rate :',
                                            self.__oShadingRate)
            self.__lineEditActions(self.__oShadingRate,
                                   __shadingRate_onChanged)
            return self.__oGroupLabelShadingRate

        def __pixelSamples():
            def __pixelSamples_onChanged():
                self.emit(QtCore.SIGNAL('pixelSamples_onChanged'))
                
            self.__oPixelSamples = cw.AlLineEdit()
            self.__oGroupLabelPixelSamples = cw.AlGroupLabel(
                                            'Pixel Samples :',
                                            self.__oPixelSamples)
            self.__lineEditActions(self.__oPixelSamples,
                                   __pixelSamples_onChanged)
            return self.__oGroupLabelPixelSamples

        def __bucketSize():
            def __bucketSize_onChanged():
                self.emit(QtCore.SIGNAL('bucketSize_onChanged'))
                
            self.__oBucketSizeLayout = cw.AlVBoxLayout()
            self.__oBucketSizeComboBox = cw.AlComboBox(
                                                    self.__listBucketSizes)
            self.__oBucketSizeGrpLabel = cw.AlGroupLabel('Bucket Size :',
                                                self.__oBucketSizeComboBox)
            self.connect(self.__oBucketSizeComboBox, 
                         QtCore.SIGNAL('currentIndexChanged(int)'),
                         __bucketSize_onChanged)
            return self.__oBucketSizeGrpLabel
        
        def __gridSize():
            def __gridSize_onChanged():
                self.emit(QtCore.SIGNAL('gridSize_onChanged'))
                
            self.__oGridSizeLayout = cw.AlVBoxLayout()
            self.__oGridSizeComboBox = cw.AlComboBox(
                                                self.__listGridSizes)
            self.__oGridSizeGrpLabel = cw.AlGroupLabel('Grid Size :',
                                                self.__oGridSizeComboBox)
            self.connect(self.__oGridSizeComboBox, 
                         QtCore.SIGNAL('currentIndexChanged(int)'),
                         __gridSize_onChanged)
            return self.__oGridSizeGrpLabel
        
        self.__oImageParent = QtGui.QWidget()
        self.__oImageFrame = cw.AlVBoxLayout()
        self.__oImageFrame.addWidget(__shadingRate())
        self.__oImageFrame.addWidget(__pixelSamples())
        self.__oImageFrame.addWidget(__bucketSize())
        self.__oImageFrame.addWidget(__gridSize())
        self.__oImageParent.setLayout(self.__oImageFrame)
        self.__oImageBloc = cw.AlBloc(self, self.__IMAGE_ICON,
                                           'Image :',
                                           self.__oImageParent)
        oMasterLayout.addWidget(self.__oImageBloc)
            
    def __output(self, oMasterLayout):
        def __format_onChanged():
            self.emit(QtCore.SIGNAL('format_onChanged'))
            
        def __toFarm():
            def __toFarmBloc_onClick():
                self.emit(QtCore.SIGNAL('toFarmBloc_onClick'))
                
            def __farmGroup_onChanged():
                self.emit(QtCore.SIGNAL('farmGroup_onChanged'))

            self.__oToFarmBloc = cw.AlGroupBox('ToFarm')
            self.__oToFarmBloc.setCheckable(1)
            self.__oToFarmBloc.setChecked(0)
            self.__setContentMargins10(self.__oToFarmBloc)
            self.connect(self.__oToFarmBloc,
                         QtCore.SIGNAL('clicked()'),
                        __toFarmBloc_onClick)
            self.__oToFarmLayout = QtGui.QVBoxLayout(self.__oToFarmBloc)
            self.__oFarmGroupComboBox = cw.AlComboBox(
                                                self.__listFramGroups)
            self.__oFarmGroupGrpLabel = cw.AlGroupLabel('Farm Group :',
                                                self.__oFarmGroupComboBox)
            self.connect(self.__oFarmGroupComboBox, 
                         QtCore.SIGNAL('currentIndexChanged(int)'),
                         __farmGroup_onChanged)
            self.__oToFarmLayout.addWidget(self.__oFarmGroupGrpLabel)
            return self.__oToFarmBloc
 
        self.__oOutputParent = QtGui.QWidget()
        self.__oOutputLayout = cw.AlVBoxLayout()
        self.__oFormatComboBox = cw.AlComboBox(self.__listFormats)
        self.__oFormatGrpLabel = cw.AlGroupLabel('Format :',
                                            self.__oFormatComboBox)
        self.connect(self.__oFormatComboBox,
                     QtCore.SIGNAL('currentIndexChanged(int)'),
                     __format_onChanged)
        self.__oOutputLayout.addWidget(self.__oFormatGrpLabel)
        self.__oOutputLayout.addWidget(__toFarm())
        self.__oOutputParent.setLayout(self.__oOutputLayout)
        self.__oOutputBlock = cw.AlBloc(self, self.__OUTPUT_ICON,
                                              'Output :',
                                              self.__oOutputParent)
        
        oMasterLayout.addWidget(self.__oOutputBlock)

    def __advanced(self, oMasterLayout): 
        def __ray_onClick():
            self.emit(QtCore.SIGNAL('ray_onClick'))
        
        def __surface_onClick():
            self.emit(QtCore.SIGNAL('surface_onClick'))
        
        def __displacement_onClick():
            self.emit(QtCore.SIGNAL('displacement_onClick'))
        
        def __subsurface_onClick():
            self.emit(QtCore.SIGNAL('subsurface_onClick'))
            
        def __cameraBlur():
            def __camBlur_onClick():
                self.emit(QtCore.SIGNAL('camBlur_onClick'))
                 
            sTitle = 'Camera Blur :'
            self.__oCamBlurCheckBox = QtGui.QCheckBox()
            self.__oCamBlurGrpLabel = cw.AlGroupLabel(
                                            sTitle,
                                            self.__oCamBlurCheckBox)
            self.connect(self.__oCamBlurCheckBox,
                         QtCore.SIGNAL('clicked()'),
                         __camBlur_onClick)
            return self.__oCamBlurGrpLabel
        
        def __depthOfField():
            def __DOF_onClick():
                self.emit(QtCore.SIGNAL('DOF_onClick'))
                
            sTitle = 'DepthOfField  :'
            self.__oDOFCheckBox = QtGui.QCheckBox()
            self.__oDOFGrpLabel = cw.AlGroupLabel(
                                            sTitle,
                                            self.__oDOFCheckBox)
            self.connect(self.__oDOFCheckBox,
                         QtCore.SIGNAL('clicked()'),
                         __DOF_onClick)
            return self.__oDOFGrpLabel
        
        def __lazyness():
            def __lazyness_onClick():
                self.emit(QtCore.SIGNAL('lazyness_onClick'))
                
            self.__oLazynessCheckBox = QtGui.QCheckBox()
            self.__oLazynessGroupLabel = cw.AlGroupLabel('Lazyness :',
                                                  self.__oLazynessCheckBox)
            self.connect(self.__oLazynessCheckBox,
                         QtCore.SIGNAL('clicked()'),
                         __lazyness_onClick)
            
            return self.__oLazynessGroupLabel
        
        def __sampleMotionOptions():
            def __sampleMotionOptions_onClick():
                self.emit(QtCore.SIGNAL('sampleMotionOptions_onClick'))
                
            self.__oSampleMotionOptions = QtGui.QCheckBox()
            self.__oGroupLabelSampleMotionOptions = cw.AlGroupLabel(
                                            'Sample Motion :',
                                            self.__oSampleMotionOptions)
            self.connect(self.__oSampleMotionOptions,
                         QtCore.SIGNAL('clicked()'),
                         __sampleMotionOptions_onClick)
            return self.__oGroupLabelSampleMotionOptions                
            
        self.__oRayCheckBox = QtGui.QCheckBox()
        self.__oRayGroupLabel = cw.AlGroupLabel('raytracing :',
                                                      self.__oRayCheckBox)
        self.connect(self.__oRayCheckBox,
                         QtCore.SIGNAL('clicked()'),
                         __ray_onClick)
        self.__oSurfaceCheckBox = QtGui.QCheckBox()
        self.__oSurfaceGroupLabel = cw.AlGroupLabel(
                                            'no surface :',
                                             self.__oSurfaceCheckBox)
        self.connect(self.__oSurfaceCheckBox,
                         QtCore.SIGNAL('clicked()'),
                         __surface_onClick)
        self.__oDisplCheckBox = QtGui.QCheckBox()
        self.__oDisplGroupLabel = cw.AlGroupLabel(
                                     'no displacement :',
                                      self.__oDisplCheckBox)
        self.connect(self.__oDisplCheckBox,
                         QtCore.SIGNAL('clicked()'),
                         __displacement_onClick)
        self.__osubsurfaceCheckBox = QtGui.QCheckBox()
        self.__osubsurfaceGroupLabel = cw.AlGroupLabel(
                                        'no subSurface :',
                                        self.__osubsurfaceCheckBox)
        self.connect(self.__osubsurfaceCheckBox,
                         QtCore.SIGNAL('clicked()'),
                         __subsurface_onClick)

        self.__oAdvancedParent = QtGui.QWidget()
        self.__oAdvancedLayout = cw.AlVBoxLayout()
        self.__oAdvancedLayout.addWidget(__lazyness())
        self.__oAdvancedLayout.addWidget(__cameraBlur())
        self.__oAdvancedLayout.addWidget(__sampleMotionOptions())
        self.__oAdvancedLayout.addWidget(__depthOfField())
        self.__oAdvancedLayout.addWidget(self.__oRayGroupLabel)
        self.__oAdvancedLayout.addWidget(self.__oSurfaceGroupLabel)
        self.__oAdvancedLayout.addWidget(self.__oDisplGroupLabel)
        self.__oAdvancedLayout.addWidget(self.__osubsurfaceGroupLabel)
        self.__oAdvancedParent.setLayout(self.__oAdvancedLayout)            
        self.__oAdvancedBloc = cw.AlBloc(self, self.__ADVANCED_ICON,
                                         'Advanced :',
                                         self.__oAdvancedParent)
        oMasterLayout.addWidget(self.__oAdvancedBloc)
    
    def __directories(self, oMasterLayout):
        def __ribName():
            def __ribName_onChanged():
                self.emit(QtCore.SIGNAL('ribName_onChanged'))
            
            def __ribName_onClick():
                self.emit(QtCore.SIGNAL('ribName_onClick'))
            
            self.__oRibNameParent = QtGui.QWidget()
            self.__oRibNameLayout = QtGui.QHBoxLayout()
            self.__setContentMargins0(self.__oRibNameLayout)
            self.__oRibName = cw.AlLineEdit()
            self.__oRibName.setMinimumWidth(140)
            self.__oRibNameButton = QtGui.QPushButton('open')
            self.__oRibNameButton.setMaximumWidth(40)
            self.__oRibNameLayout.addWidget(self.__oRibName)
            self.__oRibNameLayout.addWidget(self.__oRibNameButton)
            self.__oRibNameParent.setLayout(self.__oRibNameLayout)
            
            self.__oGroupLabelRibName = cw.AlGroupLabel(
                                            'Rib Basename :',
                                            self.__oRibNameParent)
            self.__lineEditActions(self.__oRibName,
                                   __ribName_onChanged)
            self.connect(self.__oRibNameButton,
                         QtCore.SIGNAL('clicked()'),
                         __ribName_onClick)
            return self.__oGroupLabelRibName
        
        def __pictureFolder():
            def __pictureFolder_onChanged():
                self.emit(QtCore.SIGNAL('pictureFolder_onChanged'))
            
            def __pictureFolder_onClick():
                self.emit(QtCore.SIGNAL('pictureFolder_onClick'))
                
            self.__oPictureFolderParent = QtGui.QWidget()
            self.__oPictureFolderLayout = QtGui.QHBoxLayout()
            self.__setContentMargins0(self.__oPictureFolderLayout)
            self.__oPictureFolder = cw.AlLineEdit()
            self.__oPictureFolderButton = QtGui.QPushButton('open')
            self.__oPictureFolderButton.setMaximumWidth(40)
            self.__oPictureFolderLayout.addWidget(self.__oPictureFolder)
            self.__oPictureFolderLayout.addWidget(self.__oPictureFolderButton)
            self.__oPictureFolderParent.setLayout(self.__oPictureFolderLayout)
            
            self.__oGroupLabelPictureFolder = cw.AlGroupLabel(
                                            'Picture Folder :',
                                            self.__oPictureFolderParent)
            self.__lineEditActions(self.__oPictureFolder,
                                   __pictureFolder_onChanged)
            self.connect(self.__oPictureFolderButton,
                         QtCore.SIGNAL('clicked()'),
                         __pictureFolder_onClick)
            return self.__oGroupLabelPictureFolder
        
        self.__oDirectoriesParent = QtGui.QWidget()
        self.__oDirectoriesLayout = cw.AlVBoxLayout()
        self.__oDirectoriesLayout.addWidget(__ribName())
        self.__oDirectoriesLayout.addWidget(__pictureFolder())
        self.__oDirectoriesParent.setLayout(self.__oDirectoriesLayout)            
        self.__oDirectoriesBloc = cw.AlBloc(self, self.__DIRECTORIES_ICON,
                                         'Directories :',
                                         self.__oDirectoriesParent)
        oMasterLayout.addWidget(self.__oDirectoriesBloc)

    def __renderButtons(self,oMasterLayout):
        def __liquid_onClick():
            self.emit(QtCore.SIGNAL('liquid_onClick'))
            
        def __renderButton_onClick():
            self.emit(QtCore.SIGNAL('renderButton_onClick'))
                
        def __renderSelectionButton_onClick():
            self.emit(QtCore.SIGNAL('renderSelectionButton_onClick'))
        
        def __renderSet_onClick():
            self.emit(QtCore.SIGNAL('renderSet_onClick'))      
        
        def __manageRenderSet():
            def __add2SetButton_onClick():
                    self.emit(QtCore.SIGNAL('add2SetButton_onClick'))
                
            def __remove2SetButton_onClick():
                    self.emit(QtCore.SIGNAL('remove2SetButton_onClick'))
            
            def __clearSetButton_onClick():
                    self.emit(QtCore.SIGNAL('clearSetButton_onClick'))
            
            sizeButton = 20
            self.__oAdd2SetButton = QtGui.QPushButton('A')
            self.__oAdd2SetButton.setMaximumWidth(sizeButton)
            self.connect(self.__oAdd2SetButton,
                             QtCore.SIGNAL('clicked()'),
                             __add2SetButton_onClick)
            self.__oRemove2SetButton = QtGui.QPushButton('R')
            self.__oRemove2SetButton.setMaximumWidth(sizeButton)
            self.connect(self.__oRemove2SetButton,
                             QtCore.SIGNAL('clicked()'),
                             __remove2SetButton_onClick)
            self.__oClearSetButton = QtGui.QPushButton('C')
            self.__oClearSetButton.setMaximumWidth(sizeButton)
            self.connect(self.__oClearSetButton,
                             QtCore.SIGNAL('clicked()'),
                             __clearSetButton_onClick)
                               
            self.__oSetManagerLayout = cw.AlHBoxLayout()
            self.__setContentMargins0(self.__oSetManagerLayout)
            self.__oSetManagerLayout.addWidget(self.__oAdd2SetButton)
            self.__oSetManagerLayout.addWidget(self.__oRemove2SetButton)
            self.__oSetManagerLayout.addWidget(self.__oClearSetButton)
            return self.__oSetManagerLayout
        
        
        self.__oLiquidButton = QtGui.QPushButton(
                            'liquid')
        self.__oLiquidButton.setMaximumWidth(35)
        self.connect(self.__oLiquidButton,
                         QtCore.SIGNAL('clicked()'),
                         __liquid_onClick)
        
        self.__oRenderButton = QtGui.QPushButton(
                            'R E N D E R')
        self.connect(self.__oRenderButton,
                         QtCore.SIGNAL('clicked()'),
                         __renderButton_onClick)

        self.__oRenderSelectionButton = QtGui.QPushButton('Render Selection')
        self.connect(self.__oRenderSelectionButton,
                         QtCore.SIGNAL('clicked()'),
                         __renderSelectionButton_onClick)
        self.__oRenderSetButton = QtGui.QPushButton('Render Set')
        self.connect(self.__oRenderSetButton,
                         QtCore.SIGNAL('clicked()'),
                         __renderSet_onClick)
        self.__oRenderGlobalLayout = QtGui.QVBoxLayout()
        self.__oRenderLayout = QtGui.QHBoxLayout()
        self.__setContentMargins0(self.__oRenderLayout)
        self.__oRenderLayout.addWidget(self.__oLiquidButton)
        self.__oRenderLayout.addWidget(self.__oRenderButton)
        
        self.__oRenderSelectionLayout = QtGui.QHBoxLayout()
        self.__oRenderSelectionLayout.addWidget(self.__oRenderSetButton)
        self.__oRenderSelectionLayout.addLayout(__manageRenderSet())
        self.__oRenderSelectionLayout.addStretch(1)
        self.__oRenderSelectionLayout.addWidget(self.__oRenderSelectionButton)
        
        self.__oRenderGlobalLayout.addLayout(self.__oRenderLayout)
        self.__oRenderGlobalLayout.addLayout(self.__oRenderSelectionLayout)
        oMasterLayout.addLayout(self.__oRenderGlobalLayout)

    def __lineEditActions(self, oIn, func):
        self.connect(oIn,
                     QtCore.SIGNAL('returnPressed()'),
                     func)
        self.connect(oIn,
                     QtCore.SIGNAL('textChanged(QString)'),
                     func)

    def __setContentMargins0(self, oWidget):
        """
        Method to set the contentMargin to 0
        @type oWidget: object
        @param oWidget: Qt Widget
        @rtype: object
        @return: Qt Widget with contentMargins set to (0,0,0,0)
        """
        oWidget.setContentsMargins(0,0,0,0)
        return oWidget

    def __setContentMargins10(self, oWidget):
        """
        Method to set the contentMargin to 0,10,0,0
        @type oWidget: object
        @param oWidget: Qt Widget
        @rtype: object
        @return: Qt Widget with contentMargins set to (0,10,0,0)
        """
        oWidget.setContentsMargins(0,10,0,0)
        return oWidget    
# Ni!