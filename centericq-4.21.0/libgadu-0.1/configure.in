AC_INIT(aclocal.m4)
AM_INIT_AUTOMAKE(libgadu, 0.1)

AC_PROG_RANLIB
AC_PROG_CC

AC_ARG_ENABLE(gg, [  --disable-gg   Build without Gadu-Gadu], build_gg="$enableval", build_gg="yes")
AM_CONDITIONAL(BUILD_GADU, test "x$build_gg" = xyes)

if test "$build_gg" = "yes"; then
    AC_PROG_CXX

    ###
    ###     SSL libs
    ###

    AC_ARG_WITH(ssl, [  --with-ssl              enable SSL secured connections using either OpenSSL
				  or GnuTLS],
	    [with_ssl=$withval])

    if test "$with_ssl" != "no"; then
	AC_ARG_WITH(openssl,
	    [  --with-openssl=[DIR]    enable SSL secured connections using the OpenSSL
			  library in DIR (optional)],
	    [with_openssl=$withval])

	if test -z "$with_openssl"; then
	    for ac_dir in /usr/local /usr; do
		if test -f "$ac_dir/include/openssl/ssl.h"; then
		    with_openssl=$ac_dir
		    break;
		fi
	    done
	fi

	AC_MSG_CHECKING(for OpenSSL)

	if test -n "$with_openssl" -a "$with_openssl" != "no"; then
	    if test "$with_openssl" = "yes"; then with_openssl="/usr"; fi
	    CFLAGS="$CFLAGS -I${with_openssl}"
	    AC_DEFINE(HAVE_OPENSSL)
	    AC_MSG_RESULT([found in $with_openssl])
	    AC_CHECK_LIB(crypto, main, [
		    AC_CHECK_LIB(crypto, SSLeay_add_all_algorithms, [
			AC_DEFINE(HAVE_SSLEAY)
		    ])
		])
	    AC_CHECK_LIB(ssl, main)
	else
	    AC_MSG_RESULT([not found or disabled])

	    AM_PATH_LIBGNUTLS_EXTRA(0.0.1, [
		CXXFLAGS="$CXXFLAGS $LIBGNUTLS_CFLAGS"
		LIBS="$LIBS $LIBGNUTLS_LIBS -lgnutls-extra"
		AC_DEFINE(HAVE_GNUTLS)
	    ])
	fi
    fi

    AC_MSG_CHECKING(endianness)
    AC_TRY_COMPILE([
	#include <sys/types.h>
	#include <sys/param.h>
    ], [
	#if defined(BYTE_ORDER) && defined(BIG_ENDIAN)
	    #if BYTE_ORDER == BIG_ENDIAN
		bogus
	    #endif
	#else
	    #if defined(_BIG_ENDIAN)
		bogus
	    #endif
	#endif
    ],[
	ac_end=little
    ],[
	AC_DEFINE(WORDS_BIGENDIAN, [big endian architecture])
	ac_end=big
    ])
    AC_MSG_RESULT($ac_end)

    AC_CHECK_HEADERS([stdint.h sys/types.h],,)
fi

AC_OUTPUT(Makefile)
