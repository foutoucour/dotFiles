

#File Explorer
':e' opens a file explorer
	use Ctrl-d to see the list of file in the current directory
	use tab to fill (as in shell)


Commands
o new line after cursor
O new line before cursor

:s/{find}/{replace}/		find the first instance of {find} in the line and replace by {replace}
:s/{find}/{replace}/g		find all instances of {find} in the line and replace by {replace}
:%s/{find}/{replace}/g		find all instances of {find} and replace by {replace}

# from http://www.thegeekstuff.com/2009/01/vi-and-vim-editor-5-awesome-examples-for-automatic-word-completion-using-ctrl-x-magic/
# You can use one of the following Vim shortcut keys to choose the existing words on the file.
Ctrl-x Ctrl-n : Word completion - forward
Ctrl-x Ctrl-p : Word completion - backward

# If you want to insert an existing line, type the first few words/characters of the line, and then press the Vim shortcut keys [Ctrl+x Ctrl+l], which will display all the lines matching that patten. Note: The second control character is a lowercase L.
Ctrl-x Ctrl-l : Line Completion in Vim 

# Inser the name of a the file that resides anywhere on the linux system
Ctrl-x Ctrl-f : File Name Completionn

# Dictionnary Word Completion using Ctrl-x Ctrl-k (needs set dictionary+=/usr/share/dict/words)
Ctrl-x Ctrl-k : Dictionary Word Completion

# pydiction :
<tab> for completation

# NERD Commenter : A plugin that allows for easy commenting of code for many filetypes. 
# see : http://www.vim.org/scripts/script.php?script_id=1218
# main features :
,cc         Comments our the current line or selected text
,c<space>   Toggles the comment state of the selected line(s)
,c$         Comments the current line from the cursor to the end of line
,cA         Adds comment delimiters to the end of line
,cu         Uncomments the selected line(s)

